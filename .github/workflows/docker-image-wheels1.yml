name: Build 1st batch of wheels

on:
  repository_dispatch:
    types: Build 1st batch of wheels
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get version for wheels
        shell: bash
        run: |
          export TAG=$(curl --silent https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          export WHEELS_LIST=('CRYPTOGRAPHY' 'PYNACL' 'ORJSON')
          for wheel in "${WHEELS_LIST[@]}"; do 
            export ${wheel}_VER=$(curl --silent "https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt" | grep -m 1 -i "${wheel}" | awk -F'=' '{print $NF}' | tr -d '\n')
          done
          for wheel in "${WHEELS_LIST[@]}"; do w="${wheel}_VER"; echo "${wheel}_VER=${!w}" >> $GITHUB_ENV; done

      - name: Check for existing wheels4 artifact
        shell: bash
        run: |
          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "wheels4") | .archive_download_url' | head -n 1)
          if [ -z "$LINK" ]; then
            echo "WHEELS_NEEDED=1" >> $GITHUB_ENV
          else
            wget -O wheels4.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)
            echo "WHEELS_NEEDED=0" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install QEMU and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst cloud-utils

      - name: Create a VM disk image
        run: |
          qemu-img create -f qcow2 vm-disk.qcow2 20G

      - name: Download Ubuntu cloud image
        run: |
          wget https://cloud-images.ubuntu.com/minimal/releases/focal/release/ubuntu-20.04-minimal-cloudimg-amd64.img -O ubuntu-cloud.img

      # Using virt-resize to expand the image and the root partition
      - name: Expand VM disk image and root partition
        run: |
          sudo virt-install --import --name dummy --memory 512 --disk size=1,path=vm-disk.qcow2 --vcpus 1 --os-type linux --os-variant ubuntu20.04 --noautoconsole --boot hd --graphics none --network none
          sudo virt-resize --expand /dev/sda1 ubuntu-cloud.img vm-disk.qcow2
          sudo virt-uninstall --domain dummy

      - name: Create a cloud-init ISO for VM configuration
        run: |
          cat > user-data <<EOF
          #cloud-config
          users:
            - default
          packages:
            - docker.io
            - git
            - curl
            - jq
          runcmd:
            - systemctl start docker
          EOF

          cat > meta-data <<EOF
          instance-id: github-runner-vm
          local-hostname: github-runner-vm
          EOF

          cloud-localds cloud-init.iso user-data meta-data

      - name: Boot the VM
        run: |
          sudo qemu-system-x86_64 \
          -m 2048 \
          -smp 2 \
          -enable-kvm \
          -drive file=vm-disk.qcow2,format=qcow2 \
          -drive file=cloud-init.iso,media=cdrom \
          -boot c \
          -nographic \
          -net user,hostfwd=tcp::2222-:22 \
          -net nic \
          &

          sleep 60

      - name: Build Docker image in VM
        if: ${{ env.WHEELS_NEEDED == '0' }}
        env:
          CRYPTOGRAPHY_VER: ${{ env.CRYPTOGRAPHY_VER }}
          PYNACL_VER: ${{ env.PYNACL_VER }}
          ORJSON_VER: ${{ env.ORJSON_VER }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts
          scp -o StrictHostKeyChecking=no -P 2222 wheels1/Dockerfile ubuntu@localhost:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -P 2222 wheels4.zip ubuntu@localhost:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -p 2222 ubuntu@localhost << EOF
            sudo docker build --tag wheels \
              -f /home/ubuntu/Dockerfile \
              --build-arg MATURIN=/home/ubuntu/wheels4.zip \
              --build-arg CRYPTOGRAPHY_VER=${CRYPTOGRAPHY_VER} \
              --build-arg PYNACL_VER=${PYNACL_VER} \
              --build-arg ORJSON_VER=${ORJSON_VER} \
              --platform linux/arm/v5 \
              --allow security.insecure \
              --no-cache .

            sudo docker create --name wheels wheels
            mkdir -p /home/ubuntu/wheels
            sudo docker cp wheels:/root/.cache/pip/wheels /home/ubuntu/wheels
            tar -czf wheels.tar.gz -C /home/ubuntu/wheels .
          EOF

      - name: Retrieve wheels artifacts from VM
        if: ${{ env.WHEELS_NEEDED == '0' }}
        run: |
          scp -P 2222 ubuntu@localhost:/home/ubuntu/wheels.tar.gz .
          tar -xzf wheels.tar.gz

          export WHEELS_LIST=('CRYPTOGRAPHY' 'PYNACL' 'ORJSON')
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}=$(find . -type f -name "*.whl" | grep -i "${wheel}"); done
          for wheel in "${WHEELS_LIST[@]}"; do w=${wheel}; echo "${wheel}=${!w}" >> $GITHUB_ENV; done

      - name: Upload wheels
        if: ${{ env.WHEELS_NEEDED == '0' }}
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: |
            ${{ env.PYNACL }}
            ${{ env.CRYPTOGRAPHY }}
            ${{ env.ORJSON }}

      - name: Dispatch armv5-homeassistant
        if: ${{ env.WHEELS_NEEDED == '0' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build armv5-homeassistant"}'
