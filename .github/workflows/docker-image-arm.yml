name: Build armv5-homeassistant on ARM

on: 
  #schedule:
  #  - cron: '32 1 * * MON'
  workflow_dispatch:
  repository_dispatch:
    types: Build armv5-homeassistant on ARM
  
jobs:
  build:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check for new release of HASS
        run: |
          export HASS_RELEASE=$(jq -r 'map(select(.prerelease==false)) | first | .tag_name' <<< $(curl --silent https://api.github.com/repos/home-assistant/core/releases))
          export ARMV5_RELEASE=$(jq -r '[.results[] | select(.name!="latest")][0].name' <<< $(curl --silent https://hub.docker.com/v2/repositories/rara64/armv5-homeassistant/tags/?page_size=1000))
          echo "HASS_RELEASE=$HASS_RELEASE" >> $GITHUB_ENV
          echo "ARMV5_RELEASE=$ARMV5_RELEASE" >> $GITHUB_ENV
          echo "HASS_RELEASE: $HASS_RELEASE , ARMV5_RELEASE: $ARMV5_RELEASE"
      - name: Checkout code
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE }}
        uses: actions/checkout@v3
      - name: Check for new version of deps
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE }}
        run: |
          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "deps") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o deps.zip "$LINK" || echo 'deps download failed'
          7z x deps.zip -o./deps -y || echo 'deps extract failed'

          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "deps2") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o deps2.zip "$LINK" || echo 'deps download failed'
          7z x deps2.zip -o./deps -y || echo 'deps2 extract failed'

          # GET CURRENT VERSION OF DEPS
          export TAG=$(curl --silent https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          wget https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt
          wget https://raw.githubusercontent.com/home-assistant/core/refs/tags/$TAG/requirements_all.txt
          cat *.txt >> reqs.txt

          WHEELS_LIST=('PANDAS' 'NUMPY' 'CRYPTOGRAPHY' 'UV' 'AV' 'PYNACL' 'ZEROCONF' 'ORJSON' 'DEEBOT' 'ELEVENLABS' 'ANTHROPIC')
          
          for wheel in "${WHEELS_LIST[@]}"; do 
            VER=$(cat reqs.txt | grep -m 1 -i "${wheel}" | awk -F'=' '{print $NF}' | tr -d '\n')
            export ${wheel}_VER="${VER:-0}"
          done

          for wheel in "${WHEELS_LIST[@]}"; do 
            wh=$(echo "${wheel}" | tr '[:upper:]' '[:lower:]')
            required_version=${wheel}_VER

            matching_files=$(find ./deps -type f -name "*.whl" | grep -i "${wh}")

            if [ -z "$matching_files" ]; then
              echo "No matching files found for $wheel. Expected version: ${!required_version}"
              continue
            fi

            for file in $matching_files; do
              if [[ "$file" == *"${!required_version}"* ]]; then
                echo "Keeping $file (matches version ${!required_version})"
                export ${wheel}_WHL_VER="${!required_version}"
              else
                echo "Removing $file (does not match version ${!required_version})"
                rm -f "$file"
              fi
            done
          done
          
          7z a filtered_deps.zip ./deps/* || echo 'deps repack failed'
          mv filtered_deps.zip deps.zip

          # COMPARE VERSIONS OF DEPS
          OUTDATED_DEPS=0
          OUTDATED_DEPS_2=0
          for wheel in "${WHEELS_LIST[@]}"; do
            wh=${wheel}_WHL_VER
            w=${wheel}_VER
            if [[ "${!wh}" != "${!w}" ]]; then
              case "${wheel}" in
                PYNACL|ZEROCONF|ORJSON|DEEBOT|ELEVENLABS|ANTHROPIC)
                  OUTDATED_DEPS_2=1
                  break
                  ;;
              esac
              OUTDATED_DEPS=1
              break
            fi
          done

          export OUTDATED_DEPS
          export OUTDATED_DEPS_2
          echo "OUTDATED_DEPS=$OUTDATED_DEPS" >> $GITHUB_ENV
          echo "OUTDATED_DEPS_2=$OUTDATED_DEPS_2" >> $GITHUB_ENV

          echo "PANDAS: Found (PANDAS_WHL_VER) = ${PANDAS_WHL_VER}, Expected (PANDAS_VER) = ${PANDAS_VER}"
          echo "NUMPY: Found (NUMPY_WHL_VER) = ${NUMPY_WHL_VER}, Expected (NUMPY_VER) = ${NUMPY_VER}"
          echo "CRYPTOGRAPHY: Found (CRYPTOGRAPHY_WHL_VER) = ${CRYPTOGRAPHY_WHL_VER}, Expected (CRYPTOGRAPHY_VER) = ${CRYPTOGRAPHY_VER}"
          echo "UV: Found (UV_WHL_VER) = ${UV_WHL_VER}, Expected (UV_VER) = ${UV_VER}"
          echo "AV: Found (AV_WHL_VER) = ${AV_WHL_VER}, Expected (AV_VER) = ${AV_VER}"
          echo "PYNACL: Found (PYNACL_WHL_VER) = ${PYNACL_WHL_VER}, Expected (PYNACL_VER) = ${PYNACL_VER}"
          echo "ZEROCONF: Found (ZEROCONF_WHL_VER) = ${ZEROCONF_WHL_VER}, Expected (ZEROCONF_VER) = ${ZEROCONF_VER}"
          echo "ORJSON: Found (ORJSON_WHL_VER) = ${ORJSON_WHL_VER}, Expected (ORJSON_VER) = ${ORJSON_VER}"
          echo "ANTHROPIC: Found (ANTHROPIC_WHL_VER) = ${ANTHROPIC_WHL_VER}, Expected (ANTHROPIC_VER) = ${ANTHROPIC_VER}"
          echo "ZEROCONF: Found (ELEVENLABS_WHL_VER) = ${ELEVENLABS_WHL_VER}, Expected (ELEVENLABS_VER) = ${ELEVENLABS_VER}"
          echo "DEEBOT-CLIENT: Found (DEEBOT_WHL_VER) = ${DEEBOT_WHL_VER}, Expected (DEEBOT_VER) = ${DEEBOT_VER}"
      - name: Dispatch build of deps2
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS_2 == 1}}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build 2nd batch of armv5-homeassistant deps"}'
      - name: Dispatch build of deps
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 1}}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build armv5-homeassistant deps"}'
      - name: Set up Docker Buildx
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_DEPS_2 == 0}}
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_DEPS_2 == 0}}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push the image
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_DEPS_2 == 0}}
        run: |
          export DOCKER_BUILDKIT=0 
          sudo apt install -y qemu-user-static binfmt-support

          sudo update-binfmts --install armv5 /usr/bin/qemu-arm-static \
          --magic "\x7f\x45\x4c\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
          --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
          --fix-binary yes

          uname -m
          ls

          docker buildx build --load --platform linux/arm/v5 --build-arg DEPS="deps.zip" --allow security.insecure --no-cache -t test:latest -f ./Dockerfile.arm .

          docker save -o test.tar test:latest
      - name: Upload wheels
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_DEPS_2 == 0}}
        uses: actions/upload-artifact@v4
        with:
          name: test
          path: |
            test.tar

