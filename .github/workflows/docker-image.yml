name: Build armv5-homeassistant

on: 
  schedule:
    - cron: '32 1 * * MON'
  workflow_dispatch:
  repository_dispatch:
    types: Build armv5-homeassistant
  
jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Check for new release of Home Assistant
        run: |
          export HASS_RELEASE=$(jq -r 'map(select(.prerelease==false)) | first | .tag_name' <<< $(curl --silent https://api.github.com/repos/home-assistant/core/releases))
          export ARMV5_RELEASE=$(jq -r '[.results[] | select(.name!="latest")][0].name' <<< $(curl --silent https://hub.docker.com/v2/repositories/rara64/armv5-homeassistant/tags/?page_size=1000))
          echo "HASS_RELEASE=$HASS_RELEASE" >> $GITHUB_ENV
          echo "ARMV5_RELEASE=$ARMV5_RELEASE" >> $GITHUB_ENV
          echo "HASS_RELEASE: $HASS_RELEASE , ARMV5_RELEASE: $ARMV5_RELEASE"

      - name: Checkout code
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE }}
        uses: actions/checkout@v3

      - name: Check for new version of dependencies
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE }}
        run: |
          # DOWNLOAD GO2RTC FOR ARMV5
          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "go2rtc") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o go2rtc.zip "$LINK" || echo 'deps download failed'
          7z e go2rtc.zip -o./go2rtc -y || echo 'go2rtc extract failed'

          export GO2RTC_VER=$(curl -s https://raw.githubusercontent.com/home-assistant/core/refs/tags/${{ env.HASS_RELEASE }}/Dockerfile | grep -oP 'curl -L https://github.com/AlexxIT/go2rtc/releases/download/v\K[0-9.]+')
          export GO2RTC_BUILD_VER=$(cat ./go2rtc/go2rtc_ver.txt)

          if [[ "${GO2RTC_VER}" != "${GO2RTC_BUILD_VER}" ]]; then
            echo "OUTDATED_GO2RTC=1" >> $GITHUB_ENV
            echo "OUTDATED_DEPS=0" >> $GITHUB_ENV
            echo "OUTDATED_MATURIN=0" >> $GITHUB_ENV
            echo "Outdated GO2RTC! Expected: ${GO2RTC_VER} Got: ${GO2RTC_BUILD_VER}"
            exit 0
          fi
          echo "OUTDATED_GO2RTC=0" >> $GITHUB_ENV
          #



          # DOWNLOAD MATURIN FOR ARMV5
          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "maturin") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o maturin.zip "$LINK" || echo 'deps download failed'
          7z e maturin.zip -o./maturin -y || echo 'maturin extract failed'

          export MATURIN_VER=$(curl -s https://pypi.org/pypi/maturin/json | jq -r '.info.version')
          export MATURIN_BUILD_VER=$(cat ./maturin/maturin_ver.txt)

          if [[ "${MATURIN_VER}" != "${MATURIN_BUILD_VER}" ]]; then
            echo "OUTDATED_GO2RTC=0" >> $GITHUB_ENV
            echo "OUTDATED_DEPS=0" >> $GITHUB_ENV
            echo "OUTDATED_MATURIN=1" >> $GITHUB_ENV
            echo "Outdated Maturin! Expected: ${MATURIN_VER} Got: ${MATURIN_BUILD_VER}"
            exit 0
          fi
          echo "OUTDATED_MATURIN=0" >> $GITHUB_ENV
          mv ./maturin/*.whl ./deps     
          #



          # DOWNLOAD ARTIFACTS FROM DEPS MATRIX BUILD
          export WHEELS_LIST=('anthropic' 'av' 'cryptography' 'deebot' 'elevenlabs' 'matrix' 'numpy' 'orjson' 'pandas' 'pynacl' 'uv' 'zeroconf')
          for wheel in "${WHEELS_LIST[@]}"; do
            export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r ".artifacts[] | select(.name | test(\"${wheel}\")) | .archive_download_url" | head -n 1)

            curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o "${wheel}.zip" "$LINK" || echo "${wheel} download failed"

            7z e ${wheel}.zip -o./deps -y || echo "${wheel} extract failed"

            if ["${wheel}" == "matrix"]; then
              export ${wheel}_whl_ver=$(cat "./deps/${wheel}-nio_version.txt")
            elif ["${wheel}" == "deebot"]; then
              export ${wheel}_whl_ver=$(cat "./deps/${wheel}-client_version.txt")
            else
              export ${wheel}_whl_ver=$(cat "./deps/${wheel}_version.txt")
            fi
          done
          #



          # GET CURRENT VERSION OF HASS DEPENDENCIES
          export TAG=$(curl --silent https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          wget https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt
          wget https://raw.githubusercontent.com/home-assistant/core/refs/tags/$TAG/requirements_all.txt
          cat *.txt >> reqs.txt
          sed '/^#/d' reqs.txt > filtered_reqs.txt
          mv filtered_reqs.txt reqs.txt

          for wheel in "${WHEELS_LIST[@]}"; do
            if ["${wheel}" == "uv"]; then
              export uv_ver=$(curl -s https://pypi.org/pypi/uv/json | jq -r '.info.version')
            else
              export ${wheel}_ver=$(cat reqs.txt | grep -m 1 -i "${wheel}" | awk -F'=' '{print $NF}' | tr -d '\n')
            fi
          done
          #



          # REMOVE DUPLCATE/NOT MATCHING FILES FROM DEPS FOLDER
          for wheel in "${WHEELS_LIST[@]}"; do 
            wh=${wheel}
            required_version=${wheel}_ver
            matching_files=$(find ./deps -type f -iname "${wh}*.whl" -print 2>/dev/null | tr -d '\0')

            if [[ -z "$matching_files" ]]; then
              echo "No matching files found for $wheel. Expected version: ${!required_version}"
            else
              for file in $matching_files; do
                if [[ "$file" == *"${!required_version}"* ]]; then
                  echo "Keeping $file (matches version ${!required_version})"
                  export ${wheel}_whl_ver="${!required_version}"
                else
                  echo "Removing $file (does not match version ${!required_version})"
                  rm -f "$file"
                fi
              done
            fi
          done    
          #



          # COMPARE VERSIONS OF DEPENDENCIES
          export OUTDATED_DEPS=0
          for wheel in "${WHEELS_LIST[@]}"; do
            wh=${wheel}_whl_ver
            w=${wheel}_ver
            if [[ "${!wh}" != "${!w}" ]]; then
              export OUTDATED_DEPS=1
              break
            fi
          done
          echo "OUTDATED_DEPS=$OUTDATED_DEPS" >> $GITHUB_ENV   
          #

          echo "PANDAS: Found (pandas_whl_ver) = ${pandas_whl_ver}, Expected (pandas_ver) = ${pandas_ver}"
          echo "NUMPY: Found (numpy_whl_ver) = ${numpy_whl_ver}, Expected (numpy_ver) = ${numpy_ver}"
          echo "CRYPTOGRAPHY: Found (cryptography_whl_ver) = ${cryptography_whl_ver}, Expected (cryptography_ver) = ${cryptography_ver}"
          echo "UV: Found (uv_whl_ver) = ${uv_whl_ver}, Expected (uv_ver) = ${uv_ver}"
          echo "AV: Found (av_whl_ver) = ${av_whl_ver}, Expected (av_ver) = ${av_ver}"
          echo "PYNACL: Found (pynacl_whl_ver) = ${pynacl_whl_ver}, Expected (pynacl_ver) = ${pynacl_ver}"
          echo "ZEROCONF: Found (zeroconf_whl_ver) = ${zeroconf_whl_ver}, Expected (zeroconf_ver) = ${zeroconf_ver}"
          echo "ORJSON: Found (orjson_whl_ver) = ${orjson_whl_ver}, Expected (orjson_ver) = ${orjson_ver}"
          echo "DEEBOT-CLIENT: Found (deebot_whl_ver) = ${deebot_whl_ver}, Expected (deebot_ver) = ${deebot_ver}"
          echo "ANTHROPIC: Found (anthropic_whl_ver) = ${anthropic_whl_ver}, Expected (anthropic_ver) = ${anthropic_ver}"
          echo "ELEVENLABS: Found (elevenlabs_whl_ver) = ${elevenlabs_whl_ver}, Expected (elevenlabs_ver) = ${elevenlabs_ver}"
          echo "MATRIX-NIO: Found (matrix_whl_ver) = ${matrix_whl_ver}, Expected (matrix_ver) = ${matrix_ver}"
          echo "GO2RTC: Found (GO2RTC_BUILD_VER) = ${GO2RTC_BUILD_VER}, Expected (GO2RTC_VER) = ${GO2RTC_VER}"
          echo "MATURIN: Found (MATURIN_BUILD_VER) = ${MATURIN_BUILD_VER}, Expected (MATURIN_VER) = ${MATURIN_VER}"

      - name: Dispatch build of dependencies
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 1}}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build deps for armv5-homeassistant"}'

      - name: Dispatch build of go2rtc
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_GO2RTC == 1}}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build go2rtc for armv5-homeassistant"}'

      - name: Dispatch build of maturin
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_MATURIN == 1}}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build maturin for armv5-homeassistant"}'

      - name: Set up Docker Buildx
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_GO2RTC == 0 && env.OUTDATED_MATURIN == 0}}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_GO2RTC == 0 && env.OUTDATED_MATURIN == 0}}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push the image
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_DEPS == 0 && env.OUTDATED_GO2RTC == 0 && env.OUTDATED_MATURIN == 0}}
        run: |
          export DOCKER_BUILDKIT=0 

          sudo apt install -y binfmt-support qemu-user-static

          sudo update-binfmts --install armv5 /usr/bin/qemu-arm-static \
          --magic "\x7f\x45\x4c\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
          --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
          --fix-binary yes

          uname -m

          docker buildx build --push --platform linux/arm/v5 \
          --build-arg DEPS="./deps" \
          --build-arg GO2RTC="go2rtc/go2rtc_linux_armv5" \
          --tag rara64/armv5-homeassistant:${{ env.HASS_RELEASE }} \
          --tag rara64/armv5-homeassistant:latest --label version="${{ env.HASS_RELEASE }}" \
          --allow security.insecure --no-cache -f ./Dockerfile .
