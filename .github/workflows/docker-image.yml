name: Build armv5-homeassistant

concurrency: 
  group: my-workflow-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: '32 1 * * MON'
  workflow_dispatch:
  repository_dispatch:
    types: Build armv5-homeassistant
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check for new release of HASS
        run: |
          export HASS_RELEASE=$(jq -r 'map(select(.prerelease==false)) | first | .tag_name' <<< $(curl --silent https://api.github.com/repos/home-assistant/core/releases))
          export ARMV5_RELEASE=$(jq -r '[.results[] | select(.name!="latest")][0].name' <<< $(curl --silent https://hub.docker.com/v2/repositories/rara64/armv5-homeassistant/tags/?page_size=1000))
          echo "HASS_RELEASE=$HASS_RELEASE" >> $GITHUB_ENV
          echo "ARMV5_RELEASE=$ARMV5_RELEASE" >> $GITHUB_ENV
          echo "HASS_RELEASE: $HASS_RELEASE , ARMV5_RELEASE: $ARMV5_RELEASE"
      - name: Get wheels version from both batches
        shell: bash
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE }}
        run: |
          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant-wheels/actions/artifacts))
          wget -O wheels.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)
          7z x wheels.zip

          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant-wheels-batch2/actions/artifacts))
          wget -O wheels2.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)
          7z x wheels2.zip
          
          export WHEELS_LIST=('PANDAS' 'PYNACL' 'ORJSON')
          
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_WHL_VER=$(find . -type f -name "*.whl" | grep -i "${wheel}" | cut -f 2 -d '-'); done
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_VER="$(curl --silent https://raw.githubusercontent.com/home-assistant/core/${{ env.HASS_RELEASE }}/homeassistant/package_constraints.txt | grep -m 1 -i "${wheel}=" | awk -F'=' '{print $NF}' | tr -d '\n')"; done
          
          export OUTDATED_WHL_VER=$(for wheel in "${WHEELS_LIST[@]}"; do wh=${wheel}_WHL_VER; w=${wheel}_VER; if [ ${!wh} != ${!w} ]; then echo '1'; break; fi; done)
          echo "OUTDATED_WHL_VER=$OUTDATED_WHL_VER" >> $GITHUB_ENV
          
          echo $OUTDATED_WHL_VER
          echo $PANDAS_VER
          echo $PANDAS_WHL_VER
          echo $PYNACL_VER
          echo $PYNACL_WHL_VER
          echo $ORJSON_VER
          echo $ORJSON_WHL_VER

          export WHEELS_LIST=('NUMPY' 'CRYPTOGRAPHY')
          
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_WHL_VER=$(find . -type f -name "*.whl" | grep -i "${wheel}" | cut -f 2 -d '-'); done
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_VER="$(curl --silent https://raw.githubusercontent.com/home-assistant/core/${{ env.HASS_RELEASE }}/homeassistant/package_constraints.txt | grep -m 1 -i "${wheel}=" | awk -F'=' '{print $NF}' | tr -d '\n')"; done
          
          export OUTDATED_WHL2_VER=$(for wheel in "${WHEELS_LIST[@]}"; do wh=${wheel}_WHL_VER; w=${wheel}_VER; if [ ${!wh} != ${!w} ]; then echo '1'; break; fi; done)
          echo "OUTDATED_WHL2_VER=$OUTDATED_WHL2_VER" >> $GITHUB_ENV
          
          echo $NUMPY_VER
          echo $NUMPY_WHL_VER
          echo $CRYPTOGRAPHY_VER
          echo $CRYPTOGRAPHY_WHL_VER
      - name: Check if new wheels needed from batch 1
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER != '' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant-wheels/dispatches --data '{"event_type": "Build wheels"}'
      - name: Check if new wheels needed from batch 2
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER != '' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant-wheels-batch2/dispatches --data '{"event_type": "Build wheels"}'  
      - name: Checkout code
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER == '' }}
        uses: actions/checkout@v3
      - name: Set up QEMU
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER == '' }}
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER == '' }}
        uses: docker/setup-buildx-action@v2.2.1
      - name: Login to Docker Hub
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER == '' }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push the image
        if: ${{ env.HASS_RELEASE != env.ARMV5_RELEASE && env.OUTDATED_WHL_VER == '' && env.OUTDATED_WHL2_VER == '' }}
        run: |
          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant-wheels/actions/artifacts))
          wget -O wheels.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)

          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant-wheels-batch2/actions/artifacts))
          wget -O wheels2.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)

          docker buildx build --build-arg WHEELS=wheels.zip --build-arg WHEELS2=wheels2.zip --platform linux/arm/v5 --allow security.insecure --no-cache -t test:latest .

          docker save -o test.tar test:latest
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: test
          path: |
            test.tar
