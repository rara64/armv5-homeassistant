name: Build kirkwood-homeassistant

on: 
  workflow_dispatch:
  schedule:
    - cron: '8 1 * * 1'
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check for new release of HASS
        run: |
          export HASS_RELEASE=$(jq -r 'map(select(.prerelease==false)) | first | .tag_name' <<< $(curl --silent https://api.github.com/repos/home-assistant/core/releases))
          export KIRKWOOD_RELEASE=$(jq -r '[.results[]|.version][0]' <<< $(curl --silent https://hub.docker.com/v2/repositories/rara64/kirkwood-homeassistant/tags/?page_size=1000))
          echo "HASS_RELEASE=$HASS_RELEASE" >> $GITHUB_ENV
          echo "KIRKWOOD_RELEASE=$KIRKWOOD_RELEASE" >> $GITHUB_ENV
          echo "HASS_RELEASE: ${{ env.HASS_RELEASE }}, KIRKWOOD_RELEASE: ${{ env.KIRKWOOD_RELEASE }}"
      - name: Get wheels version
        shell: bash
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE }}
        run: |
          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/kirkwood-homeassistant-wheels/actions/artifacts))
          wget -O wheels.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)
          7z x wheels.zip
          
          export WHEELS_LIST=('PANDAS' 'NUMPY' 'PYNACL' 'CRYPTO' 'ORJSON' 'PILLOW')
          
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_WHL_VER=$(find ~+ -type f -iname '${wheel}*' | cut -f 4 -d '-'); done
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}_VER=$(curl --silent https://raw.githubusercontent.com/home-assistant/core/${{ env.HASS_RELEASE }}/homeassistant/package_constraints.txt | grep -i "${wheel}=" | cut -d "=" -f3); done
          
          export OUTDATED_WHL_VER=$(for wheel in "${WHEELS_LIST[@]}"; do if [ ${wheel}_WHL_VER != ${wheel}_VER ]; then echo '1'; break; fi; done)
          echo $OUTDATED_WHL_VER
          echo "OUTDATED_WHL_VER=$OUTDATED_WHL_VER" >> $GITHUB_ENV
      - name: Check if new wheels needed
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER != '' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/kirkwood-homeassistant-wheels/dispatches --data '{"event_type": "build_application"}'
      - name: Checkout code
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER == '' }}
        uses: actions/checkout@v3
      - name: Set up QEMU
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER == '' }}
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER == '' }}
        uses: docker/setup-buildx-action@v2.2.1
      - name: Login to Docker Hub
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER == '' }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push the image
        if: ${{ env.HASS_RELEASE != env.KIRKWOOD_RELEASE && env.OUTDATED_WHL_VER == '' }}
        run: |
          export LINK=$(jq -r '[.artifacts[]|.archive_download_url][0]' <<< $(curl --silent https://api.github.com/repos/rara64/kirkwood-homeassistant-wheels/actions/artifacts))
          wget -O wheels.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)

          docker buildx build --push --build-arg WHEELS=wheels.zip \
            --tag rara64/kirkwood-homeassistant:${{ env.HASS_RELEASE }} --label version="${{ env.HASS_RELEASE }}" \
            --platform linux/arm/v5 --allow security.insecure --no-cache .
