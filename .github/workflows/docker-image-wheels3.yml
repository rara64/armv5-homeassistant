on:
  repository_dispatch:
    types: Build 3rd batch of wheels
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Get version for wheels
        shell: bash
        run: |
          export TAG=$(curl --silent https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          export WHEELS_LIST=('ZEROCONF')
          export WHEELS_LIST_REQ=('ELEVENLABS' 'ANTHROPIC')
          
          for wheel in "${WHEELS_LIST[@]}"; do 
            export ${wheel}_VER=$(curl --silent "https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt" | grep -m 1 -i "${wheel}" | awk -F'=' '{print $NF}' | tr -d '\n')
          done

          for wheel in "${WHEELS_LIST_REQ[@]}"; do 
            export ${wheel}_VER=$(curl --silent "https://raw.githubusercontent.com/home-assistant/core/$TAG/requirements_all.txt" | grep -m 1 -i "${wheel}==" | awk -F'=' '{print $NF}' | tr -d '\n')
          done
          
          for wheel in "${WHEELS_LIST[@]}"; do w="${wheel}_VER"; echo "${wheel}_VER=${!w}" >> $GITHUB_ENV; done
          for wheel in "${WHEELS_LIST_REQ[@]}"; do w="${wheel}_VER"; echo "${wheel}_VER=${!w}" >> $GITHUB_ENV; done

          echo $ZEROCONF_VER
          echo $ANTHROPIC_VER
          echo $ELEVENLABS_VER
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install QEMU
        run: sudo apt-get update && sudo apt-get install -y qemu-system-arm qemu-utils
      - name: Download Debian ARM EL root filesystem
        run: |
          wget "https://deb.debian.org/debian/dists/stable/main/installer-armel/current/images/netboot/debian-installer/armel/root.tar.gz" -O rootfs.tar.gz

      - name: Create QEMU disk image
        run: qemu-img create -f qcow2 debian_armel.img 4G

      - name: Partition and format the disk image
        run: |
          parted -s debian_armel.img mklabel msdos
          parted -s debian_armel.img mkpart primary ext4 1MiB 100%
          sudo losetup -f --show -P debian_armel.img
          sudo mkfs.ext4 /dev/loop0p1
      
      - name: Mount and extract root filesystem
        run: |
          sudo mkdir -p /mnt/armel
          sudo mount /dev/loop0p1 /mnt/armel
          sudo tar -xzf rootfs.tar.gz -C /mnt/armel
          sudo umount /mnt/armel

      - name: Download Kernel and Initrd
        run: |
          wget https://deb.debian.org/debian/dists/stable/main/installer-armel/current/images/netboot/vmlinuz-6.1.0-17-armmp-lpae
          wget https://deb.debian.org/debian/dists/stable/main/installer-armel/current/images/netboot/initrd.gz-6.1.0-17-armmp-lpae

      - name: Run QEMU with the disk image
        run: |
          qemu-system-arm \
            -M versatilepb \
            -kernel vmlinuz-6.1.0-17-armmp-lpae \
            -initrd initrd.gz-6.1.0-17-armmp-lpae \
            -drive file=debian_armel.img,if=virtio,format=qcow2 \
            -append "root=/dev/vda1 console=ttyAMA0" \
            -net nic \
            -net user,hostfwd=tcp::2222-:22 \
            -nographic \
            -no-reboot

      - name: Wait for SSH to become available
        run: |
          while ! nc -z localhost 2222; do
            sleep 1
          done
      
      - name: Create a script to copy files
        run: |
          echo '#!/bin/bash' > copy_files.sh
          echo 'scp -o StrictHostKeyChecking=no -P 2222 -r ./* root@localhost:/root' >> copy_files.sh
          chmod +x copy_files.sh

      - name: Copy files to the emulated system
        run: ./copy_files.sh

      - name: Execute commands in the emulated system
        run: |
          ssh -o StrictHostKeyChecking=no -p 2222 root@localhost << EOF
            uname -a
            # Install Docker (adapt these commands based on your Debian version)
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=armel signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            
            # Build your Docker image (example)
            cd /root
            docker build -t my-armv5-image -f Dockerfile.armv5 . 

            # Save the Docker image to a tar file
            docker save my-armv5-image > my-armv5-image.tar
          EOF
      - name: Create a script to copy back the image
        run: |
          echo '#!/bin/bash' > copy_image.sh
          echo 'scp -o StrictHostKeyChecking=no -P 2222 root@localhost:/root/my-armv5-image.tar .' >> copy_image.sh
          chmod +x copy_image.sh
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and load the image
        run: |
          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "wheels4") | .archive_download_url' | head -n 1)

          if [ -z "$LINK" ]; then
            echo "WHEELS_NEEDED=1" >> $GITHUB_ENV
            exit 0
          fi

          wget -O wheels4.zip $(curl -I -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" $LINK | grep location: | cut -d: -f2-)
          echo "WHEELS_NEEDED=0" >> $GITHUB_ENV
          
          DOCKER_BUILDKIT=0 docker buildx build --load --tag wheels -f wheels3/Dockerfile --progress=plain --build-arg MATURIN=wheels4.zip --build-arg ZEROCONF_VER=${{ env.ZEROCONF_VER }} --build-arg ANTHROPIC_VER=${{ env.ANTHROPIC_VER }} --build-arg ELEVENLABS_VER=${{ env.ELEVENLABS_VER }} --platform linux/arm/v5 --allow security.insecure --no-cache .
      - name: Build missing wheels4 if needed
        if: ${{ env.WHEELS_NEEDED == '1' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build 4th batch of wheels"}'  
      - name: Copy the Docker image back to the host
        run: ./copy_image.sh
      - name: Copy wheels from the image
        if: ${{ env.WHEELS_NEEDED == '0' }}
        shell: bash
        run: |
          docker create --name wheels wheels
          mkdir wheels
          docker cp wheels:./root/.cache/pip/wheels wheels
          
          export WHEELS_LIST=('ZEROCONF' 'JITER' 'PYDANTIC' 'TOKENIZERS' 'PYYAML')
          for wheel in "${WHEELS_LIST[@]}"; do export ${wheel}=$(find . -type f -name "*.whl" | grep -i "${wheel}"); done
          for wheel in "${WHEELS_LIST[@]}"; do w=${wheel}; echo "${wheel}=${!w}" >> $GITHUB_ENV; done

          echo "$ELEVENLABS_VER $ANTHROPIC_VER $ZEROCONF_VER" >> wheels3ver.txt
      - name: Upload wheels
        if: ${{ env.WHEELS_NEEDED == '0' }}
        uses: actions/upload-artifact@v3
        with:
          name: wheels3
          path: |
            ${{ env.ZEROCONF }}
            ${{ env.JITER }}
            ${{ env.PYDANTIC }}
            ${{ env.TOKENIZERS }}
            ${{ env.PYYAML }}
            ./wheels3ver.txt
      - name: Dispatch armv5-homeassistant
        if: ${{ env.WHEELS_NEEDED == '0' }}
        run: |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build armv5-homeassistant"}'
