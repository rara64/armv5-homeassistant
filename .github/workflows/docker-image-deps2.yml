name: Build deps2 for armv5-homeassistant

on: 
  workflow_dispatch:
  repository_dispatch:
    types: Build deps2 for armv5-homeassistant
  
jobs:
  build:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Find dependencies versions
        run: |
          export TAG=$(curl --silent https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          wget https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt
          wget https://raw.githubusercontent.com/home-assistant/core/refs/tags/$TAG/requirements_all.txt
          cat *.txt >> reqs.txt
          sed '/^#/d' reqs.txt > filtered_reqs.txt
          mv filtered_reqs.txt reqs.txt

          export WHEELS_LIST=('ORJSON' 'PYNACL' 'ZEROCONF' 'DEEBOT' 'ELEVENLABS' 'ANTHROPIC')
          for wheel in "${WHEELS_LIST[@]}"; do 
            export ${wheel}_VER=$(cat reqs.txt | grep -m 1 -i "${wheel}" | awk -F'=' '{print $NF}' | tr -d '\n')
          done

          export MATRIX_VER=$(cat reqs.txt | grep -m 1 -i "matrix-nio" | awk -F'=' '{print $NF}' | tr -d '\n')
          echo "MATRIX_VER=${MATRIX_VER}" >> $GITHUB_ENV

          for wheel in "${WHEELS_LIST[@]}"; do w="${wheel}_VER"; echo "${wheel}_VER=${!w}" >> $GITHUB_ENV; done
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build deps
        run: |
          export DOCKER_BUILDKIT=0 

          sudo apt update
          sudo apt install -y binfmt-support=2.2.2-7 qemu-user-static=1:8.2.2+ds-0ubuntu1.5

          sudo update-binfmts --install armv5 /usr/bin/qemu-arm-static \
          --magic "\x7f\x45\x4c\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
          --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
          --fix-binary yes

          uname -m

          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "deps") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o deps.zip "$LINK" || echo 'deps download failed'

          export LINK=$(curl --silent https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts | jq -r '.artifacts[] | select(.name == "maturin") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o maturin.zip "$LINK" || echo 'deps download failed'
          7z e maturin.zip -o./maturin -y || echo 'maturin extract failed'

          export MATURIN_VER=$(curl -s https://pypi.org/pypi/maturin/json | jq -r '.info.version')
          export MATURIN_BUILD_VER=$(cat ./maturin/maturin_ver.txt)
          export OUTDATED_MATURIN=0
          if [[ "${MATURIN_VER}" != "${MATURIN_BUILD_VER}" ]]; then
            export OUTDATED_MATURIN=1
            echo "OUTDATED_MATURIN=$OUTDATED_MATURIN" >> $GITHUB_ENV
            echo "Outdated Maturin! Expected: ${MATURIN_VER} Got: ${MATURIN_BUILD_VER}"
            exit 0
          fi
          echo "OUTDATED_MATURIN=$OUTDATED_MATURIN" >> $GITHUB_ENV

          find ./maturin -name "*.whl" -print0 | while IFS= read -r -d $'\0' file; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | sed 's/armv5tel/armv7l/g')
              if [ "$file" != "$new_name" ]; then
                mv -v "$file" "$new_name"
              fi
            fi
          done

          docker buildx build --load --tag wheels \
          --build-arg ANTHROPIC_VER=${{ env.ANTHROPIC_VER }} \
          --build-arg DEEBOT_VER=${{ env.DEEBOT_VER }} \
          --build-arg ELEVENLABS_VER=${{ env.ELEVENLABS_VER }} \
          --build-arg ORJSON_VER=${{ env.ORJSON_VER }} \
          --build-arg PYNACL_VER=${{ env.PYNACL_VER }} \
          --build-arg ZEROCONF_VER=${{ env.ZEROCONF_VER }} \
          --build-arg MATRIX_VER=${{ env.MATRIX_VER }} \
          --build-arg DEPS="deps.zip" \
          --build-arg MATURIN=$(MATURIN) \
          --platform linux/arm/v5 --allow security.insecure --no-cache -f ./deps2/Dockerfile .
      - name: Dispatch maturin build
        if: ${{ env.OUTDATED_MATURIN == 1 }}
        run : |
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build maturin for armv5-homeassistant"}'
      - name: Extract wheels
        if: ${{ env.WHEELS_NEEDED == '0' }}
        shell: bash
        run: |
          docker create --name wheels wheels
          mkdir wheels
          docker cp wheels:./root/.cache/pip/wheels wheels
          echo "elevenlabs==${{ env.ELEVENLABS_VER }}" >> ./wheels/versions.txt
          echo "anthropic==${{env.ANTHROPIC_VER }}" >> ./wheels/versions.txt
          echo "matrix==${{ env.MATRIX_VER }}" >> ./wheels/versions.txt
      - name: Upload wheels
        if: ${{ env.WHEELS_NEEDED == '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: deps2
          path: |
            ./wheels
      - name: Dispatch armv5-homeassistant on ARM
        if: ${{ env.WHEELS_NEEDED == '0' }}
        run: |
          sleep 90
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build armv5-homeassistant"}'
