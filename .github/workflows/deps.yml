name: Build deps for armv5-homeassistant

on: 
  workflow_dispatch:
  repository_dispatch:
    types: Build deps for armv5-homeassistant
  
jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: true
      matrix:
        include:
          - dockerfile: deps/anthropic/Dockerfile
            dependency_name: anthropic
          - dockerfile: deps/av/Dockerfile
            dependency_name: av
          - dockerfile: deps/cryptography/Dockerfile
            dependency_name: cryptography
          - dockerfile: deps/deebot-client/Dockerfile
            dependency_name: deebot-client
          - dockerfile: deps/elevenlabs/Dockerfile
            dependency_name: elevenlabs
          - dockerfile: deps/matrix-nio/Dockerfile
            dependency_name: matrix-nio
          - dockerfile: deps/numpy/Dockerfile
            dependency_name: numpy
          - dockerfile: deps/pandas/Dockerfile
            dependency_name: pandas
          - dockerfile: deps/orjson/Dockerfile
            dependency_name: orjson
          - dockerfile: deps/pynacl/Dockerfile
            dependency_name: pynacl
          - dockerfile: deps/zeroconf/Dockerfile
            dependency_name: zeroconf
          - dockerfile: deps/lxml/Dockerfile
            dependency_name: lxml
          - dockerfile: deps/uv/Dockerfile
            dependency_name: uv
          - dockerfile: deps/geocachingapi/Dockerfile
            dependency_name: geocachingapi

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if newer version is needed
        run: |
          export TAG=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" https://api.github.com/repos/home-assistant/core/releases | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
          wget https://raw.githubusercontent.com/home-assistant/core/$TAG/homeassistant/package_constraints.txt
          wget https://raw.githubusercontent.com/home-assistant/core/refs/tags/$TAG/requirements_all.txt
          cat *.txt >> reqs.txt
          sed '/^#/d' reqs.txt > filtered_reqs.txt
          mv filtered_reqs.txt reqs.txt

          export VER=$(cat reqs.txt | grep -m 1 -i "${{ matrix.dependency_name }}" | awk -F'=' '{print $NF}' | tr -d '\n')

          export LINK=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" "https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts?per_page=1000&page=1" | jq -r '.artifacts[] | select(.name == "${{ matrix.dependency_name }}") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o ${{ matrix.dependency_name }}.zip "$LINK" || echo 'Dependency download failed'
          7z e ${{ matrix.dependency_name }}.zip -o./deps -y || echo 'Dependency extract failed'

          export WHL_VER=$(cat ./deps/${{ matrix.dependency_name }}_version.txt)
          echo "Wheel version: $WHL_VER"
          echo "Expected version: $VER"

          if [[ "$WHL_VER" == *"$VER"* ]]; then
            echo "WHEELS_NEEDED=0" >> "$GITHUB_ENV"
          else
            echo "WHEELS_NEEDED=1" >> "$GITHUB_ENV"
            echo "WHEEL_VER=$VER" >> "$GITHUB_ENV"
          fi
          
      - name: Set up QEMU
        if: ${{ env.WHEELS_NEEDED == 1 }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
          image: tonistiigi/binfmt:qemu-v8.1.5
          
      - name: Set up Docker Buildx
        if: ${{ env.WHEELS_NEEDED == 1 }}
        uses: docker/setup-buildx-action@v3

      - name: Build dependency
        if: ${{ env.WHEELS_NEEDED == 1 }}
        run: |
          export LINK=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" "https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts?per_page=1000&page=1" | jq -r '.artifacts[] | select(.name == "maturin") | .archive_download_url' | head -n 1)
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o maturin.zip "$LINK" || { echo 'Maturin download failed'; exit 1; }
          7z e maturin.zip -o./maturin -y || { echo 'Maturin extract failed'; exit 1; }

          export CARGO_URL=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" https://api.github.com/repos/rara64/armv5te-cargo/releases/latest | \
          jq -r 'if .assets and (.assets | length > 0) then .assets[0].browser_download_url else empty end')
          wget $CARGO_URL -O cargo.deb || { echo 'Cargo download failed'; exit 1; }

          export LINK=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" "https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts?per_page=1000&page=1" | jq -r '.artifacts[] | select(.name == "numpy") | .archive_download_url' | head -n 1)
          mkdir numpy
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o numpy.zip "$LINK" || echo 'Numpy download failed'
          7z e numpy.zip -o./numpy -y || echo 'Numpy extract failed'

          export LINK=$(curl --retry 5 --retry-delay 5 --retry-connrefused --max-time 30 --silent -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" "https://api.github.com/repos/rara64/armv5-homeassistant/actions/artifacts?per_page=1000&page=1" | jq -r '.artifacts[] | select(.name == "anthropic") | .archive_download_url' | head -n 1)
          mkdir anthropic
          curl -L -H "Authorization: token ${{ secrets.WHEELS_TOKEN }}" -o anthropic.zip "$LINK" || echo 'Anthropic download failed'
          7z e anthropic.zip -o./anthropic -y || echo 'Anthropic extract failed'

          export CARGO_DEB="./cargo.deb"
          export MATURIN_WHL="./maturin"
          export NUMPY_WHL="./numpy"
          export ANTHROPIC_WHL="./anthropic"

          docker buildx build --load --tag wheels --build-arg MATURIN_WHL=$MATURIN_WHL --build-arg CARGO_DEB=$CARGO_DEB --build-arg WHEEL_VER=${{ env.WHEEL_VER }} --build-arg NUMPY_WHL=$NUMPY_WHL --build-arg ANTHROPIC_WHL=$ANTHROPIC_WHL --platform linux/arm/v5 --allow security.insecure --no-cache -f ${{ matrix.dockerfile }} .

      - name: Extract dependency
        if: ${{ env.WHEELS_NEEDED == 1 }}
        shell: bash
        run: |
          docker create --name wheels wheels
          mkdir wheels
          docker cp wheels:./root/.cache/pip/wheels wheels || echo "./root/.cache/pip/wheels - not found"
          docker cp wheels:./wheels wheels || echo "./wheels - not found"

          find wheels/ -name "*.whl" -type f -exec mv {} wheels/ \;
          echo ${{ env.WHEEL_VER }} >> ${{ matrix.dependency_name }}_version.txt

      - name: Upload wheels
        if: ${{ env.WHEELS_NEEDED == 1 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.dependency_name }}
          path: |
            ./wheels/*.whl
            ./${{ matrix.dependency_name}}_version.txt
    
  dispatch:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Dispatch armv5-homeassistant
        if: success()
        run: |
          sleep 90
          curl -XPOST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.WHEELS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/rara64/armv5-homeassistant/dispatches --data '{"event_type": "Build armv5-homeassistant"}'

